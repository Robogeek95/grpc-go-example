// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package welcome

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WelcomeServiceClient is the client API for WelcomeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WelcomeServiceClient interface {
	// Sends a greeting
	SendWelcome(ctx context.Context, in *WelcomeRequest, opts ...grpc.CallOption) (*WelcomeResponse, error)
}

type welcomeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWelcomeServiceClient(cc grpc.ClientConnInterface) WelcomeServiceClient {
	return &welcomeServiceClient{cc}
}

func (c *welcomeServiceClient) SendWelcome(ctx context.Context, in *WelcomeRequest, opts ...grpc.CallOption) (*WelcomeResponse, error) {
	out := new(WelcomeResponse)
	err := c.cc.Invoke(ctx, "/welcome.WelcomeService/SendWelcome", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WelcomeServiceServer is the server API for WelcomeService service.
// All implementations must embed UnimplementedWelcomeServiceServer
// for forward compatibility
type WelcomeServiceServer interface {
	// Sends a greeting
	SendWelcome(context.Context, *WelcomeRequest) (*WelcomeResponse, error)
	mustEmbedUnimplementedWelcomeServiceServer()
}

// UnimplementedWelcomeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWelcomeServiceServer struct {
}

func (UnimplementedWelcomeServiceServer) SendWelcome(context.Context, *WelcomeRequest) (*WelcomeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendWelcome not implemented")
}
func (UnimplementedWelcomeServiceServer) mustEmbedUnimplementedWelcomeServiceServer() {}

// UnsafeWelcomeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WelcomeServiceServer will
// result in compilation errors.
type UnsafeWelcomeServiceServer interface {
	mustEmbedUnimplementedWelcomeServiceServer()
}

func RegisterWelcomeServiceServer(s grpc.ServiceRegistrar, srv WelcomeServiceServer) {
	s.RegisterService(&WelcomeService_ServiceDesc, srv)
}

func _WelcomeService_SendWelcome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WelcomeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WelcomeServiceServer).SendWelcome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/welcome.WelcomeService/SendWelcome",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WelcomeServiceServer).SendWelcome(ctx, req.(*WelcomeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WelcomeService_ServiceDesc is the grpc.ServiceDesc for WelcomeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WelcomeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "welcome.WelcomeService",
	HandlerType: (*WelcomeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendWelcome",
			Handler:    _WelcomeService_SendWelcome_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "welcome.proto",
}
